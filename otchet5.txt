Создание программы, где процесс-родитель и процесс-ребёнок выполняют различные действия

Исходный код программы:
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
int main() {
        pid_t prid, parprid;
        int a = 0, c;
        prid = getpid();
        parprid = getppid();
        printf ("До выполнения fork():\n");
        printf("Ид. текущего процесса: %d\n", prid);
        printf("Ид. родительского процесса: %d\n", parprid);
        printf("Начальное значение переменной a: %d\n", a);
        c = fork();
        if(c<0) {
                printf("Ошибка при вызове fork()\n");
                exit(-1);
        }
        else if (c==0) {
                printf("Выполнение дочернего процесса\n");
                a = a+1;
                prid = getpid();
                parprid = getppid();
                printf ("После выполнения fork() для дочернего процесса:\n");
                printf("Ид. текущего процесса: %d\nИд. родительского процесса: %d\n", prid, parprid);
                printf("Значение переменной a: %d\n", a);
        }
        else {
                printf("Выполнение родительского процесса, порождён процесс с ид. %d\n", c);
                a = a+1000;
                prid = getpid();
                parprid = getppid();
                printf("После выполнения fork() для родительского процесса:\n");
                printf("Ид. текущего процесса: %d\nИд. родительского процесса: %d\n", prid, parprid);
                printf("Значение переменной a: %d\n", a);
        }
        return 0;
}

Результат выполнения программы:

До выполнения fork():
Ид. текущего процесса: 13085
Ид. родительского процесса: 12996
Значение переменной a: 0
Выполнение родительского процесса, порождён процесс с ид. 13086
После выполнения fork() для родительского процесса:
Ид. текущего процесса: 13085
Ид. родительского процесса: 12996
Значение переменной a: 1000
Выполнение дочернего процесса
После выполнения fork() для дочернего процесса:
Ид. текущего процесса: 13086
Ид. родительского процесса: 13085
Значение переменной a: 1

Выводы:
Переменная a в родительском и в дочернем процессе независимы друг от друга, так как располагаются в разном адресном пространстве
Переменные, где хранятся идентификаторы родительского и дочернего процессов также независимы друг от друга
Родительский процесс получает в качестве значения, возвращаемого системным вызовом fork() идентификатор своего дочернего процесса
Дочерний процесс получает значение 0, возвращаемое системным вызовом fork()
